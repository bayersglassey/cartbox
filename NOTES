
COUNTERS COUNT THE NUMBER OF ORDERS SATISFYING SOME PREDICATE.


What is a minimal test for generating a correct statistic?
    * start with no orders
    * place order with banana and apple
    * place order with just banana
    * stats should show:
        * if you order apple, you have 100% chance of ordering banana
        * if you order banana, you have 50% chance of ordering apple

TODO:

    * Actually make suggestions.

    * Change CharFields ('sku' etc) to ForeignKeys (to Product etc).
        The 'cart' app is part of CartBox -- just usually people won't
        use the built-in e-commerce interface, they'll populate the data
        from an external source.

    * Instead of 'suggested' BooleanField, have a 'tags' CharField
        which is a set of strings encoded as a comma-separated list?
        But keep in mind the predicate is applied to an entire order.
        So 'suggested' means: *at least one of the order's items* was
        a suggested item.


ISSUES:

    * Is there a Django field which will render as <select multiple>?..
        'Cos otherwise we're gonna have to figure out how to pass POSTed
        skus and suggested_skus to the template so it can render
        <option selected>s all over the place. You know?

    * Getting statistics for categories isn't actually possible with
        current setup.
        See Order.process_analytics.
        We would need a different type of counter which tracked sku
        against category, and another type for category against
        category.

    * Since there's no thing as a cart, there's no way to make
        suggestions in the way we were planning!..
        Ok, so add a button to "shop" page which says "update cart"
        or whatever. Really it just refreshes suggested products.


